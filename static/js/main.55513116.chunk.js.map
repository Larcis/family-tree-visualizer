{"version":3,"sources":["components/FamilyNode/FamilyNode.module.css","components/App/App.module.css","components/PinchZoomPan/PinchZoomPan.tsx","components/FamilyNode/FamilyNode.tsx","components/DataParser/DataParser.js","components/App/App.tsx","index.tsx","components/PinchZoomPan/PinchZoomPan.module.css"],"names":["module","exports","React","memo","min","max","captureWheel","className","style","children","root","useRef","useEffect","element","current","create","minZoom","maxZoom","ref","classNames","css","point","canvas","node","isRoot","onSubClick","styles","title","id","inner","gender","hasSubTree","sub","onClick","pdfjsLib","require","concatUntilSpace","row","myStr","shift","trim","dataRowToHuman","rowOrg","sex","relation","cont","keywords","document","getElementById","value","split","kw","search","concatWhileContainsAnyOf","name","surname","birthDate","isAlive","deathDate","DataParser","setData","pdfState","setPdfState","useState","htmlFor","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","loadingTask","getDocument","data","result","promise","then","async","whole_doc","i","doc","numPages","page","getPage","content","getTextContent","concat","items","map","item","str","arr","console","log","subarr","newArr","length","push","convertStringArrayToFTJSON","catch","onerror","readAsBinaryString","GlobalWorkerOptions","workerSrc","pdfjsWorker","myFam","nodes","setNodes","myId","setMyId","rootId","setRootId","newNodes","loadData","onResetClick","useCallback","header","defaultValue","wrapper","width","height","tree","renderNode","transform","left","top","reset","ReactDOM","render"],"mappings":"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","file":"static/js/main.55513116.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FamilyNode_root__1hHrR\",\"inner\":\"FamilyNode_inner__1xDzR\",\"male\":\"FamilyNode_male__2R5GT\",\"female\":\"FamilyNode_female__2lC1q\",\"isRoot\":\"FamilyNode_isRoot__Z2KzY\",\"sub\":\"FamilyNode_sub__2DCfb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2Fnnc\",\"header\":\"App_header__Y7gBZ\",\"title\":\"App_title__SmBOn\",\"wrapper\":\"App_wrapper__1km48\",\"tree\":\"App_tree__3hcgm\",\"reset\":\"App_reset__233Wr\"};","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { create } from 'pinch-zoom-pan';\n\nimport css from './PinchZoomPan.module.css';\n\ninterface IProps {\n  min?: number;\n  max?: number;\n  captureWheel?: boolean;\n  className?: string;\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\n\nexport default React.memo<IProps>(\n  function PinchZoomPan({ min, max, captureWheel, className, style, children }) {\n    const root = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      const element = root.current;\n      if (!element) return;\n      return create({ element, minZoom: min, maxZoom: max, captureWheel });\n    }, [min, max, captureWheel]);\n\n    return (\n      <div ref={root} className={classNames(className, css.root)} style={style}>\n        <div className={css.point}>\n          <div className={css.canvas}>\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ExtNode } from 'relatives-tree/lib/types';\nimport styles from './FamilyNode.module.css';\n\ninterface Props {\n  node: ExtNode;\n  isRoot: boolean;\n  onSubClick: (id: string) => void;\n  style?: React.CSSProperties;\n}\n\nexport default React.memo<Props>(\n  function FamilyNode({ node, isRoot, onSubClick, style }) {\n    return (\n      <div className={styles.root} style={style} title={node.id}>\n        <div\n          className={classNames(\n            styles.inner,\n            styles[node.gender],\n            isRoot && styles.isRoot,\n          )}\n        />\n        {node.hasSubTree && (\n          <div\n            className={classNames(styles.sub, styles[node.gender])}\n            onClick={() => onSubClick(node.id)}\n          />\n        )}\n      </div>\n    );\n  }\n);\n","import { useState, useRef } from \"react\"\r\nimport pdfjsWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\nconst pdfjsLib = require(/* webpackChunkName: \"pdfjs-dist\" */ `pdfjs-dist`)\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\n\r\nfunction concatUntilSpace(row){\r\n    let myStr = \"\";\r\n    while(row[0] !== \" \"){\r\n        myStr += row[0]\r\n        row.shift();\r\n    }\r\n    row.shift()//space\r\n    return myStr.trim();\r\n}\r\n\r\nfunction concatWhileContainsAnyOf(row){\r\n    let myStr = \"\";\r\n    let cont;\r\n    let keywords = document.getElementById(\"relationKeywordBases\").value.split(',');\r\n    while(true){\r\n        cont = false;\r\n        for(let kw in keywords){\r\n            if(row[0].search(keywords[kw]) !== -1){\r\n                cont = true\r\n                break;\r\n            }\r\n        }\r\n        if(cont) {\r\n            myStr += row[0] + \" \"\r\n            row.shift();\r\n        } else {\r\n            row.shift();//space\r\n            return myStr.trim();\r\n        }\r\n    }\r\n}\r\n\r\nfunction dataRowToHuman(rowOrg){\r\n    let row = [...rowOrg];\r\n    let sex = row[0] === 'E' ? 'male' : 'female';\r\n    row.shift()// K or E\r\n    row.shift()//space\r\n    let relation = concatWhileContainsAnyOf(row)\r\n    let name = concatUntilSpace(row);\r\n    let surname = concatUntilSpace(row);\r\n    while(row[0].search(/[0-9]+\\/[0-9]+\\/[0-9]+/g) === -1) row.shift();\r\n    let birthDate = row[0];\r\n    row.shift();\r\n\r\n    while(row[0].search('Ölüm') === -1 && row[0].search('Sağ') === -1) row.shift();\r\n    let isAlive = row[0].search('Ölüm') === -1;\r\n    row.shift();\r\n    \r\n    let deathDate = 'N/A';\r\n    if(!isAlive){\r\n        deathDate = row[0];\r\n    }\r\n\r\n    return {\r\n        sex,\r\n        relation,\r\n        name,\r\n        surname,\r\n        birthDate,\r\n        isAlive,\r\n        deathDate\r\n    }\r\n}\r\nfunction convertStringArrayToFTJSON(arr){\r\n    console.log(arr)\r\n    let subarr = []\r\n    let newArr = []\r\n\r\n    for(let i = 0; i < arr.length; i++)\r\n    {\r\n        if(arr[i] === 'K' || arr[i] === 'E')\r\n        {\r\n            newArr.push(subarr)\r\n            subarr = []\r\n        }\r\n        subarr.push(arr[i])\r\n    }\r\n    newArr.push(subarr)\r\n    newArr.shift()\r\n    for(let i = 0; i < newArr.length; i++){\r\n        console.log(dataRowToHuman(newArr[i]))\r\n    }\r\n    console.log(newArr)\r\n}\r\n\r\nexport default function DataParser({setData}){\r\n    const [pdfState, setPdfState] = useState();\r\n    if(pdfState){\r\n        return <div>{pdfState}</div>\r\n    }\r\n    return <>\r\n        <label htmlFor=\"FileSelector\">Upload PDF  </label>\r\n        <input type=\"file\" accept=\".pdf\" id=\"FileSelector\" onChange={(e)=>{\r\n            let file = e.target.files[0];\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n                var loadingTask = pdfjsLib.getDocument({data: evt.target.result});\r\n                // loadingTask.onProgress = (e)=>{\r\n                //     console.log(e)\r\n                // }\r\n                \r\n                // loadingTask.onUnsupportedFeature = (e)=>{\r\n                //     console.log(e)\r\n                // }\r\n                setPdfState(\"Parsing...\")\r\n                loadingTask.promise.then(async (doc)=>{\r\n                    // console.log(doc)\r\n                    var whole_doc = []\r\n                    for(let i = 1; i <= doc.numPages; i++)\r\n                    {\r\n                        let page = await doc.getPage(i);\r\n                        let content = await page.getTextContent();\r\n                        whole_doc = whole_doc.concat(content.items.map((item) => item.str))\r\n                    }\r\n                    convertStringArrayToFTJSON(whole_doc)\r\n\r\n                    setPdfState(\"Ready.\")\r\n                }).catch((e)=>{\r\n                    console.log(\"PDF Load error: \", e)\r\n                    setPdfState(\"Parse Error!\")\r\n                }) \r\n            };\r\n            reader.onerror = function(e) {\r\n                console.log('Reader Error : ' + e.type);\r\n                setPdfState(\"Read Error!\")\r\n            };\r\n            setPdfState(\"Reading...\")\r\n            reader.readAsBinaryString(file);\r\n        }}/>    \r\n    </>\r\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport { Node, ExtNode } from 'relatives-tree/lib/types';\nimport ReactFamilyTree from 'react-family-tree';\nimport PinchZoomPan from '../PinchZoomPan/PinchZoomPan';\nimport FamilyNode from '../FamilyNode/FamilyNode';\nimport DataParser from '../DataParser/DataParser';\n\nimport averageTree from 'relatives-tree/samples/average-tree.json';\n\nimport styles from './App.module.css';\n\nlet myFam = [\n  {\n    \"id\": \"HkqEDLvxE\",\n    \"gender\": \"female\",\n    \"parents\": [],\n    \"siblings\": [],\n    \"spouses\": [{\n      \"id\": \"HkqEDLvxE1\",\n      \"type\": \"married\"\n    }],\n    \"children\": []\n  },\n  {\n    \"id\": \"HkqEDLvxE1\",\n    \"gender\": \"male\",\n    \"parents\": [],\n    \"siblings\": [],\n    \"spouses\": [{\n      \"id\": \"HkqEDLvxE\",\n      \"type\": \"married\"\n    }],\n    \"children\": []\n  },\n];\n\nconst WIDTH = 70;\nconst HEIGHT = 80;\n\ntype Source = Array<Node>\n\nexport default React.memo<{}>(\n  function App() {\n    const [nodes, setNodes] = useState<Source>([]);\n    const [myId, setMyId] = useState<string>('');\n    const [rootId, setRootId] = useState<string>('');\n\n    function setNewNodes(newNodes: Source){\n        if (newNodes) {\n          setNodes([]); // Avoid invalid references to unknown nodes\n          setRootId(newNodes[0].id);\n          setMyId(newNodes[0].id);\n          setNodes(newNodes);\n        }\n    }\n    useEffect(() => {\n      const loadData = async () => {\n        let newNodes;\n        newNodes = myFam as Source;\n        if (newNodes) {\n          setNodes([]); // Avoid invalid references to unknown nodes\n          setRootId(newNodes[0].id);\n          setMyId(newNodes[0].id);\n          setNodes(newNodes);\n        }\n      }\n\n      loadData();\n    }, [])\n\n    const onResetClick = useCallback(() => setRootId(myId), [myId]);\n\n    return (\n      <div className={styles.root}>\n        <header className={styles.header}>\n          <h1 className={styles.title}>\n            E-devlet Soyağacı görselleştirme\n          </h1>\n          <div>\n            <input type=\"text\" defaultValue=\"Annesi,Babası,Kendisi\" id=\"relationKeywordBases\"/>\n          </div>\n          <div>\n            <DataParser setData={setNewNodes}></DataParser>\n          </div>\n        </header>\n        {nodes.length > 0 && (\n          <PinchZoomPan\n            min={0.5}\n            max={2.5}\n            captureWheel\n            className={styles.wrapper}\n          >\n            <ReactFamilyTree\n              nodes={nodes as Node[]}\n              rootId={rootId}\n              width={WIDTH}\n              height={HEIGHT}\n              className={styles.tree}\n              renderNode={(node: ExtNode) => (\n                <FamilyNode\n                  key={node.id}\n                  node={node}\n                  isRoot={node.id === rootId}\n                  onSubClick={setRootId}\n                  style={{\n                    width: WIDTH,\n                    height: HEIGHT,\n                    transform: `translate(${node.left * (WIDTH / 2)}px, ${node.top * (HEIGHT / 2)}px)`,\n                  }}\n                />\n              )}\n            />\n          </PinchZoomPan>\n        )}\n        {rootId !== myId && (\n          <div className={styles.reset} onClick={onResetClick}>\n            Reset\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PinchZoomPan_root__1xgys\",\"point\":\"PinchZoomPan_point__3YKDz\",\"canvas\":\"PinchZoomPan_canvas__HmFh0\"};"],"sourceRoot":""}