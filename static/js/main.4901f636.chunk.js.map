{"version":3,"sources":["components/FamilyNode/FamilyNode.module.css","components/App/App.module.css","components/PinchZoomPan/PinchZoomPan.tsx","components/FamilyNode/FamilyNode.tsx","components/DataParser/DataParser.js","components/App/App.tsx","index.tsx","components/PinchZoomPan/PinchZoomPan.module.css"],"names":["module","exports","React","memo","min","max","captureWheel","className","style","children","root","useRef","useEffect","element","current","create","minZoom","maxZoom","ref","classNames","css","point","canvas","human","node","isRoot","onSubClick","showDead","extra","styles","opacity","isAlive","title","id","inner","gender","width","textAlign","name","surname","birthDate","deathDate","hasSubTree","sub","onClick","pdfjsLib","require","short","concatUntilSpace","row","myStr","shift","trim","dataRowToHuman","rowOrg","sex","relation","cont","keywords","document","getElementById","value","split","kw","search","concatWhileContainsAnyOf","generate","findHumanWithRelation","humans","i","length","j","addAsSibling","arr","newSib","siblings","push","updateCompitableArrayAddNewChild","meId","parentID","console","log","addFamily","rootKey","dadKey","momKey","dadId","momId","me","dad","mom","parents","updateCompitableArrayAddParent","spouses","DataParser","setData","pdfState","setPdfState","useState","htmlFor","type","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","loadingTask","getDocument","data","result","promise","then","async","whole_doc","doc","numPages","page","getPage","content","getTextContent","concat","items","map","item","str","subarr","newArr","uniqHumans","found","convertStringArrayToFTJSON","compitableArr","ret","str1","p","counter","Math","pow","val","substring","generateRelativesTreeFromHumans","catch","onerror","readAsBinaryString","GlobalWorkerOptions","workerSrc","pdfjsWorker","nodes","setNodes","myId","setMyId","rootId","setRootId","setShowDead","onResetClick","useCallback","header","checked","defaultChecked","defaultValue","newNodes","href","wrapper","height","tree","renderNode","transform","left","top","reset","ReactDOM","render"],"mappings":"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","file":"static/js/main.4901f636.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"FamilyNode_root__1hHrR\",\"inner\":\"FamilyNode_inner__1xDzR\",\"male\":\"FamilyNode_male__2R5GT\",\"female\":\"FamilyNode_female__2lC1q\",\"isRoot\":\"FamilyNode_isRoot__Z2KzY\",\"sub\":\"FamilyNode_sub__2DCfb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__2Fnnc\",\"header\":\"App_header__Y7gBZ\",\"title\":\"App_title__SmBOn\",\"wrapper\":\"App_wrapper__1km48\",\"tree\":\"App_tree__3hcgm\",\"reset\":\"App_reset__233Wr\"};","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { create } from 'pinch-zoom-pan';\n\nimport css from './PinchZoomPan.module.css';\n\ninterface IProps {\n  min?: number;\n  max?: number;\n  captureWheel?: boolean;\n  className?: string;\n  style?: React.CSSProperties;\n  children: React.ReactNode;\n}\n\nexport default React.memo<IProps>(\n  function PinchZoomPan({ min, max, captureWheel, className, style, children }) {\n    const root = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      const element = root.current;\n      if (!element) return;\n      return create({ element, minZoom: min, maxZoom: max, captureWheel });\n    }, [min, max, captureWheel]);\n\n    return (\n      <div ref={root} className={classNames(className, css.root)} style={style}>\n        <div className={css.point}>\n          <div className={css.canvas}>\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { ExtNode } from 'relatives-tree/lib/types';\nimport styles from './FamilyNode.module.css';\n\ninterface Props {\n  node: ExtNode;\n  isRoot: boolean;\n  onSubClick: (id: string) => void;\n  style?: React.CSSProperties;\n  showDead: boolean;\n}\n\nexport default React.memo<Props>(\n  function FamilyNode({ node, isRoot, onSubClick, style, showDead }) {\n    let human:any\n    human = node\n    human = human.extra; \n    return (\n      <div className={styles.root} style={{...style, opacity: (!showDead && !human.isAlive) ? 0 : 1 }} title={node.id}>\n        <div\n          className={classNames(\n            styles.inner,\n            styles[node.gender],\n            isRoot && styles.isRoot,\n          )}\n        >\n          <p style={{\n            width: \"100%\",\n            textAlign: \"center\"\n          }}>\n            {human.name}<br/>\n            {human.surname}<br/>\n            {human.birthDate}<br/>\n            {!human.isAlive && human.deathDate}\n          </p>\n        </div>\n        {node.hasSubTree && (\n          <div\n            className={classNames(styles.sub, styles[node.gender])}\n            onClick={() => onSubClick(node.id)}\n          />\n        )}\n      </div>\n    );\n  }\n);\n","import { useState } from \"react\"\r\nimport pdfjsWorker from \"pdfjs-dist/build/pdf.worker.entry\";\r\nconst pdfjsLib = require(/* webpackChunkName: \"pdfjs-dist\" */ `pdfjs-dist`)\r\nconst short = require('short-uuid');\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorker;\r\n\r\n\r\nfunction concatUntilSpace(row){\r\n    let myStr = \"\";\r\n    while(row[0] !== \" \"){\r\n        myStr += row[0]\r\n        row.shift();\r\n    }\r\n    row.shift()//space\r\n    return myStr.trim();\r\n}\r\n\r\nfunction concatWhileContainsAnyOf(row){\r\n    let myStr = \"\";\r\n    let cont;\r\n    let keywords = document.getElementById(\"relationKeywordBases\").value.split(',');\r\n    while(true){\r\n        cont = false;\r\n        for(let kw in keywords){\r\n            if(row[0].search(keywords[kw]) !== -1){\r\n                cont = true\r\n                break;\r\n            }\r\n        }\r\n        if(cont) {\r\n            myStr += row[0] + \" \"\r\n            row.shift();\r\n        } else {\r\n            row.shift();//space\r\n            return myStr.trim();\r\n        }\r\n    }\r\n}\r\n\r\nfunction dataRowToHuman(rowOrg){\r\n    let row = [...rowOrg];\r\n    let sex = row[0] === 'E' ? 'male' : 'female';\r\n    row.shift()// K or E\r\n    row.shift()//space\r\n    let relation = concatWhileContainsAnyOf(row)\r\n    let name = concatUntilSpace(row);\r\n    let surname = concatUntilSpace(row);\r\n    while(row[0].search(/[0-9]+\\/[0-9]+\\/[0-9]+/g) === -1) row.shift();\r\n    let birthDate = row[0];\r\n    row.shift();\r\n\r\n    while(row[0].search('Ölüm') === -1 && row[0].search('Sağ') === -1) row.shift();\r\n    let isAlive = row[0].search('Ölüm') === -1;\r\n    row.shift();\r\n    \r\n    let deathDate = 'N/A';\r\n    if(!isAlive){\r\n        deathDate = row[0];\r\n    }\r\n\r\n    return {\r\n        id: short.generate(),\r\n        gender: sex,\r\n        relation: [relation],\r\n        name,\r\n        surname,\r\n        birthDate,\r\n        isAlive,\r\n        deathDate\r\n    }\r\n}\r\nfunction convertStringArrayToFTJSON(arr){\r\n    let subarr = []\r\n    let newArr = []\r\n\r\n    for(let i = 0; i < arr.length; i++)\r\n    {\r\n        if(arr[i] === 'K' || arr[i] === 'E')\r\n        {\r\n            newArr.push(subarr)\r\n            subarr = []\r\n        }\r\n        subarr.push(arr[i])\r\n    }\r\n    newArr.push(subarr)\r\n    newArr.shift()\r\n    newArr = newArr.map(e => dataRowToHuman(e))\r\n\r\n    //unify humans\r\n    let uniqHumans = [];\r\n    for(let i = 0; i < newArr.length; i++){\r\n        let found = false;\r\n        for(let j = 0; j < uniqHumans.length; j++){\r\n            if(uniqHumans[j].birthDate === newArr[i].birthDate \r\n                && uniqHumans[j].name === newArr[i].name \r\n                && uniqHumans[j].surname === newArr[i].surname\r\n            ){\r\n                found = true;\r\n                uniqHumans[j].relation.push(newArr[i].relation[0])\r\n                break;\r\n            }\r\n        }\r\n        if(!found){\r\n            uniqHumans.push(newArr[i]);\r\n        }\r\n    }\r\n    // for(let i = 0; i < newArr.length; i++){\r\n    //     console.log(dataRowToHuman(newArr[i]))\r\n    // }\r\n    console.log(uniqHumans)\r\n    return uniqHumans;\r\n}\r\n\r\nfunction findHumanWithRelation(humans, relation){\r\n    for(let i = 0;i < humans.length; i++){\r\n        for(let j = 0; j < humans[i].relation.length; j++){\r\n            if(humans[i].relation[j] === relation){\r\n                return humans[i];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateCompitableArrayAddParent(arr, meId, dadId, momId){\r\n    for(let i = 0; i < arr.length; i++){\r\n        if(arr[i].id === meId){\r\n            arr[i].parents = []\r\n            if(dadId) \r\n                arr[i].parents.push({\r\n                    \"id\": dadId,\r\n                    \"type\": \"blood\"\r\n                })\r\n            if(momId) \r\n                arr[i].parents.push({\r\n                    \"id\": momId,\r\n                    \"type\": \"blood\"\r\n                })\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction addAsSibling(arr, id, newSib){\r\n    for(let i = 0; i < arr.length; i++){\r\n        if(arr[i].id === id){\r\n            for(let j = 0; j < arr[i].siblings.length; j++){\r\n                if(arr[i].siblings[j].id === newSib){\r\n                    return;\r\n                }\r\n            }\r\n            arr[i].siblings.push({\r\n                \"id\": newSib,\r\n                \"type\": \"blood\"\r\n            })\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateCompitableArrayAddNewChild(arr, meId, parentID){\r\n    for(let i = 0; i < arr.length; i++){\r\n        if(arr[i].id === parentID){\r\n            for(let j = 0; j < arr[i].children.length; j++){\r\n                addAsSibling(arr, arr[i].children[j].id, meId);\r\n                addAsSibling(arr, meId, arr[i].children[j].id);\r\n            }\r\n            console.log(arr[i])\r\n            arr[i].children.push({\r\n                    \"id\": meId,\r\n                    \"type\": \"blood\"\r\n            });\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction addFamily(humans, arr, rootKey, dadKey, momKey){\r\n    // console.log(rootKey, dadKey, momKey);\r\n    let me = findHumanWithRelation(humans, rootKey);\r\n    let dad = findHumanWithRelation(humans, dadKey);\r\n    let mom = findHumanWithRelation(humans, momKey);\r\n    let dadId, momId;\r\n    dadId = dad ? dad.id : null;\r\n    momId = mom ? mom.id : null;\r\n    if(!me) return false;\r\n    if(!updateCompitableArrayAddParent(arr, me.id, dadId, momId)){\r\n        arr.push({\r\n            \"id\": me.id,\r\n            \"extra\": me,\r\n            \"gender\": me.gender,\r\n            \"parents\": [],\r\n            \"siblings\": [],\r\n            \"spouses\": [],\r\n            \"children\": []\r\n        })\r\n        if(momId){\r\n            arr[arr.length-1].parents.push({\r\n                \"id\": momId,\r\n                \"type\": \"blood\"\r\n            })\r\n        }\r\n        if(dadId){\r\n            arr[arr.length-1].parents.push({\r\n                \"id\": dadId,\r\n                \"type\": \"blood\"\r\n            })\r\n        }\r\n    }\r\n    \r\n    if(dad && !updateCompitableArrayAddNewChild(arr, me.id, dad.id)){\r\n        arr.push({\r\n            \"id\": dad.id,\r\n            \"extra\": dad,\r\n            \"gender\": dad.gender,\r\n            \"parents\": [],\r\n            \"siblings\": [],\r\n            \"spouses\": [],\r\n            \"children\": [{\r\n                \"id\": me.id,\r\n                \"type\": \"blood\"\r\n            }]\r\n        });\r\n        if(momId){\r\n            arr[arr.length-1].spouses.push({\r\n                \"id\": momId,\r\n                \"type\": \"married\"\r\n            })\r\n        }\r\n    }\r\n    \r\n    if(mom && !updateCompitableArrayAddNewChild(arr, me.id, mom.id)){\r\n        arr.push({\r\n            \"id\": mom.id,\r\n            \"extra\": mom,\r\n            \"gender\": mom.gender,\r\n            \"parents\": [],\r\n            \"siblings\": [],\r\n            \"spouses\": [],\r\n            \"children\": [{\r\n                \"id\": me.id,\r\n                \"type\": \"blood\"\r\n            }]\r\n        });\r\n        if(dadId){\r\n            arr[arr.length-1].spouses.push({\r\n                \"id\": dadId,\r\n                \"type\": \"married\"\r\n            })\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction generateRelativesTreeFromHumans(humans){\r\n    let compitableArr = [];\r\n    let ret = true;\r\n    addFamily(humans, compitableArr, \"Kendisi\", \"Babası\", \"Annesi\");\r\n    \r\n    let p = [\"Babasının\", \"Annesinin\"];\r\n    let str1;\r\n    let counter = 1;\r\n    while(ret){\r\n        for(let i = 0; i < Math.pow(2, counter); i++){\r\n            str1 = \"\"\r\n            let val = i;\r\n            for(let j = 0; j < counter; j++)\r\n            {\r\n                str1 += p[val & 1] + \" \";\r\n                val = val >> 1;\r\n            }\r\n            str1 = str1.trim();\r\n            console.log(str1);\r\n            ret = addFamily(humans, compitableArr, str1.substring(0, str1.length - 3), str1 + \" Babası\", str1 + \" Annesi\")\r\n        }\r\n        counter++;\r\n    }\r\n\r\n    // str = \"Annesi\"\r\n    // while(ret){\r\n    //     ret = addFamily(humans, compitableArr, str, str + \"nın Babası\", str + \"nın Annesi\")\r\n    //     str = \"Annesinin \" + str;\r\n    // }\r\n    // console.log(addFamily(humans, compitableArr, \"Babası\", \"Babasının Babası\", \"Babasının Annesi\"));\r\n    // console.log(addFamily(humans, compitableArr, \"Annesi\", \"Annesinin Babası\", \"Annesinin Annesi\"));\r\n    \r\n    console.log(compitableArr)\r\n    return compitableArr;\r\n\r\n}\r\n\r\n\r\nexport default function DataParser({setData}){\r\n    const [pdfState, setPdfState] = useState();\r\n    if(pdfState){\r\n        return <div>{pdfState}</div>\r\n    }\r\n    return <>\r\n        <label htmlFor=\"FileSelector\">PDF Yükle  </label>\r\n        <input type=\"file\" accept=\".pdf\" id=\"FileSelector\" onChange={(e)=>{\r\n            let file = e.target.files[0];\r\n            var reader = new FileReader();\r\n            reader.onload = function(evt) {\r\n                var loadingTask = pdfjsLib.getDocument({data: evt.target.result});\r\n                // loadingTask.onProgress = (e)=>{\r\n                //     console.log(e)\r\n                // }\r\n                \r\n                // loadingTask.onUnsupportedFeature = (e)=>{\r\n                //     console.log(e)\r\n                // }\r\n                setPdfState(\"İşleniyor...\")\r\n                loadingTask.promise.then(async (doc)=>{\r\n                    // console.log(doc)\r\n                    var whole_doc = []\r\n                    for(let i = 1; i <= doc.numPages; i++)\r\n                    {\r\n                        let page = await doc.getPage(i);\r\n                        let content = await page.getTextContent();\r\n                        whole_doc = whole_doc.concat(content.items.map((item) => item.str));\r\n                    }\r\n                    let humans = convertStringArrayToFTJSON(whole_doc);\r\n                    let compitableArr = generateRelativesTreeFromHumans(humans)\r\n                    let rootId = findHumanWithRelation(humans, \"Babasının Annesi\").id\r\n                    // let rootId = findHumanWithRelation(humans, \"Annesi\").id\r\n                    // setData(compitableArr, rootId, rootId);\r\n                    let meId = findHumanWithRelation(humans, \"Kendisi\").id\r\n                    setData(compitableArr, meId, meId);\r\n                    setPdfState(\"Hazır.\");\r\n                }).catch((e)=>{\r\n                    console.log(\"PDF Load error: \", e);\r\n                    setPdfState(\"İşleme Hatası!\");\r\n                }) \r\n            };\r\n            reader.onerror = function(e) {\r\n                console.log('Reader Error : ' + e.type);\r\n                setPdfState(\"Okuma Hatası!\");\r\n            };\r\n            setPdfState(\"Okunuyor...\");\r\n            reader.readAsBinaryString(file);\r\n        }}/>    \r\n    </>\r\n}","import React, { useState, useCallback } from 'react';\nimport { Node, ExtNode } from 'relatives-tree/lib/types';\nimport ReactFamilyTree from 'react-family-tree';\nimport PinchZoomPan from '../PinchZoomPan/PinchZoomPan';\nimport FamilyNode from '../FamilyNode/FamilyNode';\nimport DataParser from '../DataParser/DataParser';\n\nimport styles from './App.module.css';\n\nconst WIDTH = 120;\nconst HEIGHT = 130;\n\ntype Source = Array<Node>\n\nexport default React.memo<{}>(\n  function App() {\n    const [nodes, setNodes] = useState<Source>([]);\n    const [myId, setMyId] = useState<string>('');\n    const [rootId, setRootId] = useState<string>('');\n    const [showDead, setShowDead] = useState(true);\n    \n    function setNewNodes(newNodes: Source, rootId: string, myId: string){\n        if (newNodes) {\n          setNodes([]); // Avoid invalid references to unknown nodes\n          setRootId(rootId);\n          setMyId(myId);\n          setNodes(newNodes);\n        }\n    }\n\n    const onResetClick = useCallback(() => setRootId(myId), [myId]);\n\n    return (\n      <div className={styles.root}>\n        <header className={styles.header}>\n          <h1 className={styles.title}>\n            E-devlet Soyağacı görselleştirme\n          </h1>\n          <div>\n            <input type=\"checkbox\" onChange={(e)=>{\n              setShowDead(e.target.checked)\n            }} defaultChecked/>\n          </div>\n          <div>\n            <input type=\"text\" defaultValue=\"Annesi,Babası,Kendisi\" id=\"relationKeywordBases\"/>\n          </div>\n          <div>\n            <DataParser setData={setNewNodes}></DataParser>\n          </div>\n        </header>\n        {nodes.length == 0 && <p style={{textAlign: \"center\", width: \"100%\"}}>\n          <a href=\"https://www.turkiye.gov.tr/nvi-alt-ust-soy-bilgisi-sorgulama\">Buradaki</a> linki ziyaret ederek \n          açılan pdf'i \"PDF olarak\" kaydet seçeneğiyle kaydedin. Sonrasında siteye geri dönerek \"PDF Yükle\" butonu ile\n          pdf'i yükleyin. \n        </p>}\n        {nodes.length > 0 && (\n          <PinchZoomPan\n            min={0.5}\n            max={2.5}\n            captureWheel\n            className={styles.wrapper}\n          >\n            <ReactFamilyTree\n              nodes={nodes as Node[]}\n              rootId={rootId}\n              width={WIDTH}\n              height={HEIGHT}\n              className={styles.tree}\n              renderNode={(node: ExtNode) => (\n                <FamilyNode\n                  showDead={showDead}\n                  key={node.id}\n                  node={node}\n                  isRoot={node.id === rootId}\n                  onSubClick={setRootId}\n                  style={{\n                    width: WIDTH,\n                    height: HEIGHT,\n                    transform: `translate(${node.left * (WIDTH / 2)}px, ${node.top * (HEIGHT / 2)}px)`,\n                  }}\n                />\n              )}\n            />\n          </PinchZoomPan>\n        )}\n        {rootId !== myId && (\n          <div className={styles.reset} onClick={onResetClick}>\n            Reset\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PinchZoomPan_root__1xgys\",\"point\":\"PinchZoomPan_point__3YKDz\",\"canvas\":\"PinchZoomPan_canvas__HmFh0\"};"],"sourceRoot":""}